#NAME	= KVPstorage
#CC		= gcc
#FLAGS	= -Wall -Werror -Wextra
#HEADER	= KVPstorage.h
#SRCS	= main input_loop exec_command open_settings_file init_settings_list \
#		add_kvp_to_list lst_new_setting lst_add_setting cmd_set get_kvp_from_line \
#		get_kvp_from_list cmd_get cmd_delete update_file cmd_getall
#VPATH	= ./srcs
#
#OBJECTS := $(SRCS:%=%.o)
#SRCS	:= $(SRCS:%=%.c)
#
#
#ifeq ($(static), true)
#FLAGS += -static
#endif
#
#all: $(OBJECTS) $(NAME)
#
#$(NAME): $(OBJECTS)
#	@$(CC) $(FLAGS) $^ -o $(NAME)
#	@echo "[ + ] $(NAME) has been compiled"
#
#%.o: %.c $(HEADER)
#	@$(CC) $(FLAGS) -c -o $@ $< -I .
#
#clean:
#	@rm -f $(OBJECTS)
#	@echo "[ - ] removed object files"
#
#fclean: clean
#	@rm -f $(NAME)
#	@echo "[ - ] removed $(NAME)"
#
#re: fclean all

SRCS_KVP = main input_loop exec_command open_settings_file init_settings_list \
		add_kvp_to_list lst_new_setting lst_add_setting cmd_set get_kvp_from_line \
		get_kvp_from_list cmd_get cmd_delete update_file cmd_getall
OBJ_KVP := $(SRCS_KVP:%=%.o)
SRCS_KVP := $(SRCS_KVP:%=%.c)
VPATH = ./src
################################################################################

# A sample Makefile for building both Google Mock and Google Test and
# using them in user tests.  This file is self-contained, so you don't
# need to use the Makefile in Google Test's source tree.  Please tweak
# it to suit your environment and project.  You may want to move it to
# your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GMOCK_HEADERS and GTEST_HEADERS, which you can use
# in your own targets but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file, or if you want to use
# a copy of Google Test at a different location.
GTEST_DIR = ../googletest-release-1.8.1/googletest

# Points to the root of Google Mock, relative to where this file is.
# Remember to tweak this if you move this file.
GMOCK_DIR = ../googletest-release-1.8.1/googlemock

# Where to find user code.
USER_DIR = .

TEST_DIR = tests
SRC_DIR = src
HDR_DIR = include

# Flags passed to the preprocessor.
# Set Google Test and Google Mock's header directories as system
# directories, such that the compiler doesn't generate warnings in
# these headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include -isystem $(GMOCK_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread -fsanitize=address 

CXXFLAGS_RELEASE += -Wall -Wextra

CXXFLAGS_DEBUG += -Wall -Wextra -pg -fprofile-arcs -ftest-coverage

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = KVPtest
RELEASE = KVPStorage



# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# All Google Mock headers. Note that all Google Test headers are
# included here too, as they are #included by Google Mock headers.
# Usually you shouldn't change this definition.	
GMOCK_HEADERS = $(GMOCK_DIR)/include/gmock/*.h \
                $(GMOCK_DIR)/include/gmock/internal/*.h \
                $(GTEST_HEADERS)

# House-keeping build targets.

# Build  KVPStorage app test, release and debug targets
all : OBJ_MAKE $(TESTS)

test: OBJ_MAKE $(TESTS)

release: $(RELEASE)

# clean all artifacts
clean :
	rm -f $(TESTS) $(RELEASE) gmock.a gmock_main.a *.o *.gcda *.gcno *.gcov *.out *.kvp $(TEST_DIR)/*.kvp $(TEST_DIR)/out.txt

# clean intermediate files only, leave libraries and binaries
clean_im:
	rm -f *.o *.gcda *.gcno *.gcov *.out *.kvp
	
# Builds gmock.a and gmock_main.a.  These libraries contain both
# Google Mock and Google Test.  A test should link with either gmock.a
# or gmock_main.a, depending on whether it defines its own main()
# function.  It's fine if your test only uses features from Google
# Test (and not Google Mock).

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)
GMOCK_SRCS_ = $(GMOCK_DIR)/src/*.cc $(GMOCK_HEADERS)

# For simplicity and to avoid depending on implementation details of
# Google Mock and Google Test, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Mock and
# Google Test compile fast and for ordinary users their source rarely
# changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GTEST_DIR)/src/gtest-all.cc

gmock-all.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock-all.cc

gmock_main.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock_main.cc

gmock.a : gmock-all.o gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gmock_main.a : gmock-all.o gtest-all.o gmock_main.o
	$(AR) $(ARFLAGS) $@ $^


# Builds the unit tests, and release and debug variant of the KVPStorage app

KVPtest.o : $(TEST_DIR)/KVPtest.cpp $(HDR_DIR)/*.h $(GMOCK_HEADERS)
	g++ $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/KVPtest.cpp -I$(HDR_DIR)

OBJ_MAKE : $(SRC_DIR)/*.c  $(HDR_DIR)/*.h
	gcc -Wall -Wextra -Werror -c $(SRC_DIR)/*.c -I$(HDR_DIR)
#	rm main.o


KVPtest : KVPtest.o $(OBJ_KVP) gmock_main.a
	g++ $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@  -I$(HDR_DIR)

KVPStorage : $(SRC_DIR)/*.c  $(HDR_DIR)/*.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS_RELEASE) $^ -o $@  -I$(HDR_DIR)